buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.4.2'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'net.minecraftforge.gradle.forge'

import org.ajoberstar.grgit.Grgit

ext.repo = Grgit.open()

version = "${mc_version}-${mod_version}-${repo.head().abbreviatedId}"
group = "${package_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}"

srcCompat = JavaVersion.VERSION_1_8
targetCompat = JavaVersion.VERSION_1_8

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    useDepAts = true

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

repositories {
    maven { // The repo from which to get jei
        name "Progwm Repo"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
}

dependencies {
    deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}"
    compile "org.apache.httpcomponents:fluent-hc:${httpclient_version}"
    deobfProvided "mcp.mobius.waila:Waila:${waila_version}_1.9.4"
}

shadowJar {
    // Only shadow fluent-hc
    dependencies {
        include(dependency('org.apache.httpcomponents:fluent-hc:.*'))
    }

    // Relocate fluent-hc to prevent conflicts with other mods that include it
    relocate 'org.apache.http.client.fluent', 'droidicus.aquaregia.repack.org.apache.http.client.fluent'

    classifier '' // Replace the default JAR
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'log4j2.xml'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-Xlint:unchecked')
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar
    archives shadowJar
}
